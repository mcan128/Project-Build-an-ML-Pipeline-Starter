name: train_random_forest
conda_env: conda.yml

entry_points:
  main:
    # We still define parameters here for MLflow's internal validation and UI.
    # However, the 'command' will no longer explicitly pass them as CLI args,
    # as Hydra in run.py will manage config composition.
    parameters:
      trainval_artifact:
        description: Train dataset
        type: string

      test_artifact:
        description: Test dataset
        type: string

      val_size:
        description: Size of the validation split. Fraction of the dataset, or number of items
        type: float

      random_seed:
        description: Seed for the random number generator. Use this for reproducibility
        type: int
        default: 42

      stratify_by:
        description: Column to use for stratification (if any)
        type: string
        default: 'none'

      # rf_config is now expected as a path to a JSON file
      rf_config:
        description: Path to a JSON file containing Random Forest configuration.
        type: string # Use string, as type: path can sometimes be strict in MLflow/Hydra interactions

      max_tfidf_features:
        description: Maximum number of words to consider for the TFIDF
        type: int

      output_artifact:
        description: Name for the output artifact
        type: string

    # --- SIMPLIFIED COMMAND: Hydra in run.py handles config loading ---
    command: >-
      python run.py
      trainval_artifact={trainval_artifact}
      test_artifact={test_artifact}
      val_size={val_size}
      random_seed={random_seed}
      stratify_by={stratify_by}
      rf_config={rf_config}
      max_tfidf_features={max_tfidf_features}
      output_artifact={output_artifact}
